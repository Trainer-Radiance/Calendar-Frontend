{"ast":null,"code":"import{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export function AuthProvider(_ref){let{children}=_ref;const[user,setUser]=useState(null);const[timezone,setTimezone]=useState(()=>{// Try to get the user's timezone automatically\ntry{const userTimeZone=Intl.DateTimeFormat().resolvedOptions().timeZone;// If it's a US timezone, return it, otherwise default to America/New_York\nreturn userTimeZone.startsWith('America/')?userTimeZone:'America/New_York';}catch(error){return'America/New_York';// Default to EST/EDT\n}});const[loading,setLoading]=useState(true);useEffect(()=>{const checkAuth=async()=>{try{const res=await fetch('http://localhost:5000/api/me',{credentials:'include'});const data=await res.json();setUser(data.user);}catch(error){console.error('Auth check failed:',error);}finally{setLoading(false);}};checkAuth();},[]);const logout=async()=>{await fetch('http://localhost:5000/logout',{method:'POST',credentials:'include'});setUser(null);};// Get the current timezone abbreviation (e.g., EST or EDT)\nconst getTimezoneAbbr=()=>{const date=new Date();return date.toLocaleTimeString('en-US',{timeZone:timezone,timeZoneName:'short'}).split(' ')[2];};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,logout,timezone,setTimezone,timezoneAbbr:getTimezoneAbbr()},children:children});}export function useAuth(){const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;}","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","timezone","setTimezone","userTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","startsWith","error","loading","setLoading","checkAuth","res","fetch","credentials","data","json","console","logout","method","getTimezoneAbbr","date","Date","toLocaleTimeString","timeZoneName","split","Provider","value","timezoneAbbr","useAuth","context","Error"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const res = await fetch('http://localhost:5000/api/me', {\n          credentials: 'include'\n        });\n        const data = await res.json();\n        setUser(data.user);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const logout = async () => {\n    await fetch('http://localhost:5000/logout', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    setUser(null);\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        user, \n        loading, \n        logout, \n        timezone, \n        setTimezone,\n        timezoneAbbr: getTimezoneAbbr()\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvE,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEnC,MAAO,SAAS,CAAAO,YAAYA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGX,QAAQ,CAAC,IAAM,CAC7C;AACA,GAAI,CACF,KAAM,CAAAY,YAAY,CAAGC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC,QAAQ,CACrE;AACA,MAAO,CAAAJ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC,CAAGL,YAAY,CAAG,kBAAkB,CAChF,CAAE,MAAOM,KAAK,CAAE,CACd,MAAO,kBAAkB,CAAE;AAC7B,CACF,CAAC,CAAC,CACF,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGpB,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAoB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,CAAC,8BAA8B,CAAE,CACtDC,WAAW,CAAE,SACf,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAH,GAAG,CAACI,IAAI,CAAC,CAAC,CAC7BjB,OAAO,CAACgB,IAAI,CAACjB,IAAI,CAAC,CACpB,CAAE,MAAOU,KAAK,CAAE,CACdS,OAAO,CAACT,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC5C,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CACDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAO,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,KAAM,CAAAL,KAAK,CAAC,8BAA8B,CAAE,CAC1CM,MAAM,CAAE,MAAM,CACdL,WAAW,CAAE,SACf,CAAC,CAAC,CACFf,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED;AACA,KAAM,CAAAqB,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACvB,MAAO,CAAAD,IAAI,CAACE,kBAAkB,CAAC,OAAO,CAAE,CACtCjB,QAAQ,CAAEN,QAAQ,CAClBwB,YAAY,CAAE,OAChB,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAClB,CAAC,CAED,mBACEhC,IAAA,CAACC,WAAW,CAACgC,QAAQ,EACnBC,KAAK,CAAE,CACL7B,IAAI,CACJW,OAAO,CACPS,MAAM,CACNlB,QAAQ,CACRC,WAAW,CACX2B,YAAY,CAAER,eAAe,CAAC,CAChC,CAAE,CAAAvB,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAEA,MAAO,SAAS,CAAAgC,OAAOA,CAAA,CAAG,CACxB,KAAM,CAAAC,OAAO,CAAGzC,UAAU,CAACK,WAAW,CAAC,CACvC,GAAI,CAACoC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}