{"ast":null,"code":"import { getAccessToken, getRefreshToken, isTokenExpired, refreshAccessToken, removeTokens } from './auth';\nimport API_BASE_URL from '../config/api';\n\n// Helper function to add JWT authentication to fetch requests\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    console.log(`Fetching with auth: ${url}`);\n\n    // Get the access token\n    let accessToken = getAccessToken();\n\n    // If no token, try to make the request without authentication\n    // This allows the function to work during the transition period\n    if (!accessToken) {\n      console.log('No access token available, making request without JWT');\n      // Include credentials for session-based auth as fallback\n      return fetch(url, {\n        ...options,\n        credentials: 'include',\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n\n    // If token exists but is expired, try to refresh it\n    if (isTokenExpired(accessToken)) {\n      console.log('Access token expired, attempting to refresh');\n      const refreshToken = getRefreshToken();\n      if (refreshToken) {\n        accessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n        if (!accessToken) {\n          console.error('Failed to refresh token, clearing auth data');\n          removeTokens();\n          // Fall back to session-based auth\n          return fetch(url, {\n            ...options,\n            credentials: 'include',\n            headers: {\n              ...options.headers,\n              'Content-Type': 'application/json'\n            }\n          });\n        }\n      } else {\n        console.error('No refresh token available, clearing auth data');\n        removeTokens();\n        // Fall back to session-based auth\n        return fetch(url, {\n          ...options,\n          credentials: 'include',\n          headers: {\n            ...options.headers,\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    }\n\n    // Add authorization header with the token\n    const headers = {\n      ...options.headers,\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${accessToken}`\n    };\n\n    // Make the request with the authorization header\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n\n    // Handle 401 Unauthorized errors\n    if (response.status === 401) {\n      console.log('Received 401 response, attempting token refresh');\n      // Try to refresh the token\n      const refreshToken = getRefreshToken();\n      if (refreshToken) {\n        const newAccessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n        if (newAccessToken) {\n          console.log('Token refreshed successfully, retrying request');\n          // Retry the request with the new token\n          headers['Authorization'] = `Bearer ${newAccessToken}`;\n          return fetch(url, {\n            ...options,\n            headers\n          });\n        }\n      }\n\n      // If we can't refresh, clear tokens and try session auth\n      console.error('Authentication failed after refresh attempt, clearing tokens');\n      removeTokens();\n\n      // Fall back to session-based auth\n      return fetch(url, {\n        ...options,\n        credentials: 'include',\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    return response;\n  } catch (error) {\n    console.error('Error in fetchWithAuth:', error);\n    // In case of any error, try with session auth as last resort\n    return fetch(url, {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...options.headers,\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n};","map":{"version":3,"names":["getAccessToken","getRefreshToken","isTokenExpired","refreshAccessToken","removeTokens","API_BASE_URL","fetchWithAuth","url","options","console","log","accessToken","fetch","credentials","headers","refreshToken","error","response","status","newAccessToken"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/utils/api.js"],"sourcesContent":["import { getAccessToken, getRefreshToken, isTokenExpired, refreshAccessToken, removeTokens } from './auth';\nimport API_BASE_URL from '../config/api';\n\n// Helper function to add JWT authentication to fetch requests\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    console.log(`Fetching with auth: ${url}`);\n\n    // Get the access token\n    let accessToken = getAccessToken();\n\n    // If no token, try to make the request without authentication\n    // This allows the function to work during the transition period\n    if (!accessToken) {\n      console.log('No access token available, making request without JWT');\n      // Include credentials for session-based auth as fallback\n      return fetch(url, {\n        ...options,\n        credentials: 'include',\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json',\n        }\n      });\n    }\n\n    // If token exists but is expired, try to refresh it\n    if (isTokenExpired(accessToken)) {\n      console.log('Access token expired, attempting to refresh');\n      const refreshToken = getRefreshToken();\n      if (refreshToken) {\n        accessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n        if (!accessToken) {\n          console.error('Failed to refresh token, clearing auth data');\n          removeTokens();\n          // Fall back to session-based auth\n          return fetch(url, {\n            ...options,\n            credentials: 'include',\n            headers: {\n              ...options.headers,\n              'Content-Type': 'application/json',\n            }\n          });\n        }\n      } else {\n        console.error('No refresh token available, clearing auth data');\n        removeTokens();\n        // Fall back to session-based auth\n        return fetch(url, {\n          ...options,\n          credentials: 'include',\n          headers: {\n            ...options.headers,\n            'Content-Type': 'application/json',\n          }\n        });\n      }\n    }\n\n    // Add authorization header with the token\n    const headers = {\n      ...options.headers,\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${accessToken}`\n    };\n\n    // Make the request with the authorization header\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    });\n\n    // Handle 401 Unauthorized errors\n    if (response.status === 401) {\n      console.log('Received 401 response, attempting token refresh');\n      // Try to refresh the token\n      const refreshToken = getRefreshToken();\n      if (refreshToken) {\n        const newAccessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n        if (newAccessToken) {\n          console.log('Token refreshed successfully, retrying request');\n          // Retry the request with the new token\n          headers['Authorization'] = `Bearer ${newAccessToken}`;\n          return fetch(url, {\n            ...options,\n            headers,\n          });\n        }\n      }\n\n      // If we can't refresh, clear tokens and try session auth\n      console.error('Authentication failed after refresh attempt, clearing tokens');\n      removeTokens();\n\n      // Fall back to session-based auth\n      return fetch(url, {\n        ...options,\n        credentials: 'include',\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/json',\n        }\n      });\n    }\n\n    return response;\n  } catch (error) {\n    console.error('Error in fetchWithAuth:', error);\n    // In case of any error, try with session auth as last resort\n    return fetch(url, {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...options.headers,\n        'Content-Type': 'application/json',\n      }\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}