{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Radiance_Tech\\\\Desktop\\\\calendar-app\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const res = await fetch('/api/me', {\n          credentials: 'include'\n        });\n        const data = await res.json();\n        setUser(data.user);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const logout = async () => {\n    await fetch('/api/logout', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    setUser(null);\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      logout,\n      timezone,\n      setTimezone,\n      timezoneAbbr: getTimezoneAbbr()\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"lBhsem/apQYczxmyIEtgmDU78Oo=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","timezone","setTimezone","userTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","startsWith","error","loading","setLoading","checkAuth","res","fetch","credentials","data","json","console","logout","method","getTimezoneAbbr","date","Date","toLocaleTimeString","timeZoneName","split","Provider","value","timezoneAbbr","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const res = await fetch('/api/me', {\n          credentials: 'include'\n        });\n        const data = await res.json();\n        setUser(data.user);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const logout = async () => {\n    await fetch('/api/logout', {\n      method: 'POST',\n      credentials: 'include'\n    });\n    setUser(null);\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        user, \n        loading, \n        logout, \n        timezone, \n        setTimezone,\n        timezoneAbbr: getTimezoneAbbr()\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,MAAM;IAC7C;IACA,IAAI;MACF,MAAMY,YAAY,GAAGC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC,QAAQ;MACrE;MACA,OAAOJ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC,GAAGL,YAAY,GAAG,kBAAkB;IAChF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,OAAO,kBAAkB,CAAC,CAAC;IAC7B;EACF,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,SAAS,EAAE;UACjCC,WAAW,EAAE;QACf,CAAC,CAAC;QACF,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;QAC7BjB,OAAO,CAACgB,IAAI,CAACjB,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdS,OAAO,CAACT,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,MAAML,KAAK,CAAC,aAAa,EAAE;MACzBM,MAAM,EAAE,MAAM;MACdL,WAAW,EAAE;IACf,CAAC,CAAC;IACFf,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;;EAED;EACA,MAAMqB,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvB,OAAOD,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;MACtCjB,QAAQ,EAAEN,QAAQ;MAClBwB,YAAY,EAAE;IAChB,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,oBACEhC,OAAA,CAACC,WAAW,CAACgC,QAAQ;IACnBC,KAAK,EAAE;MACL7B,IAAI;MACJW,OAAO;MACPS,MAAM;MACNlB,QAAQ;MACRC,WAAW;MACX2B,YAAY,EAAER,eAAe,CAAC;IAChC,CAAE;IAAAxB,QAAA,EAEDA;EAAQ;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACnC,EAAA,CA9DeF,YAAY;AAAAsC,EAAA,GAAZtC,YAAY;AAgE5B,OAAO,SAASuC,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,MAAMC,OAAO,GAAG/C,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC0C,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}