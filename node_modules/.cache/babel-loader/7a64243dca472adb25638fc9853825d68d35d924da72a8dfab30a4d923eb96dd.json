{"ast":null,"code":"import API_BASE_URL from '../config/api';\n\n// Get CSRF token from cookie\nconst getCsrfToken = () => {\n  const cookies = document.cookie.split(';');\n  for (let cookie of cookies) {\n    const [name, value] = cookie.trim().split('=');\n    if (name === 'XSRF-TOKEN') {\n      return value;\n    }\n  }\n  return null;\n};\n\n// Helper function to add session authentication to fetch requests\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    console.log(`Fetching with session auth: ${url}`);\n\n    // Get CSRF token\n    const csrfToken = getCsrfToken();\n\n    // Prepare headers\n    const headers = {\n      ...options.headers,\n      'Content-Type': 'application/json'\n    };\n\n    // Add CSRF token if available and it's a mutation request\n    if (csrfToken && (options.method === 'POST' || options.method === 'PUT' || options.method === 'DELETE')) {\n      headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Always use session-based authentication\n    return fetch(url, {\n      ...options,\n      credentials: 'include',\n      // Include cookies for session auth\n      headers\n    });\n  } catch (error) {\n    console.error('Error in fetchWithAuth:', error);\n    throw error;\n  }\n};\n\n// Function to get a fresh CSRF token\nexport const refreshCsrfToken = async () => {\n  try {\n    // Make a GET request to any endpoint that sets a CSRF cookie\n    await fetch(`${API_BASE_URL}/api/csrf-token`, {\n      credentials: 'include'\n    });\n    return true;\n  } catch (error) {\n    console.error('Error refreshing CSRF token:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getCsrfToken","cookies","document","cookie","split","name","value","trim","fetchWithAuth","url","options","console","log","csrfToken","headers","method","fetch","credentials","error","refreshCsrfToken"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/utils/api.js"],"sourcesContent":["import API_BASE_URL from '../config/api';\n\n// Get CSRF token from cookie\nconst getCsrfToken = () => {\n  const cookies = document.cookie.split(';');\n  for (let cookie of cookies) {\n    const [name, value] = cookie.trim().split('=');\n    if (name === 'XSRF-TOKEN') {\n      return value;\n    }\n  }\n  return null;\n};\n\n// Helper function to add session authentication to fetch requests\nexport const fetchWithAuth = async (url, options = {}) => {\n  try {\n    console.log(`Fetching with session auth: ${url}`);\n\n    // Get CSRF token\n    const csrfToken = getCsrfToken();\n\n    // Prepare headers\n    const headers = {\n      ...options.headers,\n      'Content-Type': 'application/json',\n    };\n\n    // Add CSRF token if available and it's a mutation request\n    if (csrfToken && (options.method === 'POST' || options.method === 'PUT' || options.method === 'DELETE')) {\n      headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Always use session-based authentication\n    return fetch(url, {\n      ...options,\n      credentials: 'include',  // Include cookies for session auth\n      headers\n    });\n  } catch (error) {\n    console.error('Error in fetchWithAuth:', error);\n    throw error;\n  }\n};\n\n// Function to get a fresh CSRF token\nexport const refreshCsrfToken = async () => {\n  try {\n    // Make a GET request to any endpoint that sets a CSRF cookie\n    await fetch(`${API_BASE_URL}/api/csrf-token`, {\n      credentials: 'include'\n    });\n    return true;\n  } catch (error) {\n    console.error('Error refreshing CSRF token:', error);\n    return false;\n  }\n};\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,eAAe;;AAExC;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;EAC1C,KAAK,IAAID,MAAM,IAAIF,OAAO,EAAE;IAC1B,MAAM,CAACI,IAAI,EAAEC,KAAK,CAAC,GAAGH,MAAM,CAACI,IAAI,CAAC,CAAC,CAACH,KAAK,CAAC,GAAG,CAAC;IAC9C,IAAIC,IAAI,KAAK,YAAY,EAAE;MACzB,OAAOC,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACxD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,+BAA+BH,GAAG,EAAE,CAAC;;IAEjD;IACA,MAAMI,SAAS,GAAGb,YAAY,CAAC,CAAC;;IAEhC;IACA,MAAMc,OAAO,GAAG;MACd,GAAGJ,OAAO,CAACI,OAAO;MAClB,cAAc,EAAE;IAClB,CAAC;;IAED;IACA,IAAID,SAAS,KAAKH,OAAO,CAACK,MAAM,KAAK,MAAM,IAAIL,OAAO,CAACK,MAAM,KAAK,KAAK,IAAIL,OAAO,CAACK,MAAM,KAAK,QAAQ,CAAC,EAAE;MACvGD,OAAO,CAAC,cAAc,CAAC,GAAGD,SAAS;IACrC;;IAEA;IACA,OAAOG,KAAK,CAACP,GAAG,EAAE;MAChB,GAAGC,OAAO;MACVO,WAAW,EAAE,SAAS;MAAG;MACzBH;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF;IACA,MAAMH,KAAK,CAAC,GAAGjB,YAAY,iBAAiB,EAAE;MAC5CkB,WAAW,EAAE;IACf,CAAC,CAAC;IACF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}