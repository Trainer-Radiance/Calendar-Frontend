{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Radiance_Tech\\\\Desktop\\\\calendar-app\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { AUTH_ENDPOINTS } from '../config/api';\nimport { refreshCsrfToken } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        console.log('Checking authentication...');\n\n        // Refresh CSRF token first (dummy function now)\n        await refreshCsrfToken();\n\n        // Use session-based authentication\n        const res = await fetch(AUTH_ENDPOINTS.GET_ME, {\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        if (res.ok) {\n          const data = await res.json();\n          console.log('Auth data from session:', data);\n          if (data.user) {\n            setUser(data.user);\n\n            // Check if user has Google tokens\n            if (!data.user.hasTokens) {\n              console.warn('User is authenticated but has no Google tokens');\n            } else {\n              console.log('User has Google tokens available');\n            }\n          } else {\n            console.log('No user in session');\n            setUser(null);\n          }\n        } else {\n          console.log(`Session auth failed: ${res.status}`);\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const logout = async () => {\n    try {\n      // Refresh CSRF token before logout\n      await refreshCsrfToken();\n\n      // Session-based logout\n      await fetch(AUTH_ENDPOINTS.LOGOUT, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n          // CSRF token will be added by fetchWithAuth\n        }\n      });\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n      setUser(null);\n    }\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      logout,\n      timezone,\n      setTimezone,\n      timezoneAbbr: getTimezoneAbbr()\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"lBhsem/apQYczxmyIEtgmDU78Oo=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","AUTH_ENDPOINTS","refreshCsrfToken","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","timezone","setTimezone","userTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","startsWith","error","loading","setLoading","checkAuth","console","log","res","fetch","GET_ME","credentials","headers","ok","data","json","hasTokens","warn","status","logout","LOGOUT","method","getTimezoneAbbr","date","Date","toLocaleTimeString","timeZoneName","split","Provider","value","timezoneAbbr","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport { AUTH_ENDPOINTS } from '../config/api';\nimport { refreshCsrfToken } from '../utils/api';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        console.log('Checking authentication...');\n\n        // Refresh CSRF token first (dummy function now)\n        await refreshCsrfToken();\n\n        // Use session-based authentication\n        const res = await fetch(AUTH_ENDPOINTS.GET_ME, {\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (res.ok) {\n          const data = await res.json();\n          console.log('Auth data from session:', data);\n\n          if (data.user) {\n            setUser(data.user);\n\n            // Check if user has Google tokens\n            if (!data.user.hasTokens) {\n              console.warn('User is authenticated but has no Google tokens');\n            } else {\n              console.log('User has Google tokens available');\n            }\n          } else {\n            console.log('No user in session');\n            setUser(null);\n          }\n        } else {\n          console.log(`Session auth failed: ${res.status}`);\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const logout = async () => {\n    try {\n      // Refresh CSRF token before logout\n      await refreshCsrfToken();\n\n      // Session-based logout\n      await fetch(AUTH_ENDPOINTS.LOGOUT, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          // CSRF token will be added by fetchWithAuth\n        }\n      });\n\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n      setUser(null);\n    }\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        logout,\n        timezone,\n        setTimezone,\n        timezoneAbbr: getTimezoneAbbr()\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}