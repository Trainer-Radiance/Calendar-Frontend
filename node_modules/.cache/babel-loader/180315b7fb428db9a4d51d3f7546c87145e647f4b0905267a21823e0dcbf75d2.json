{"ast":null,"code":"import { getAccessToken, getRefreshToken, isTokenExpired, refreshAccessToken, removeTokens } from './auth';\nimport API_BASE_URL from '../config/api';\n\n// Helper function to add JWT authentication to fetch requests\nexport const fetchWithAuth = async (url, options = {}) => {\n  // Get the access token\n  let accessToken = getAccessToken();\n\n  // If token exists but is expired, try to refresh it\n  if (accessToken && isTokenExpired(accessToken)) {\n    const refreshToken = getRefreshToken();\n    if (refreshToken) {\n      accessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n      if (!accessToken) {\n        throw new Error('Failed to refresh access token');\n      }\n    } else {\n      throw new Error('No refresh token available');\n    }\n  }\n\n  // Add authorization header if we have a token\n  const headers = {\n    ...options.headers,\n    'Content-Type': 'application/json'\n  };\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  // Make the request with the authorization header\n  const response = await fetch(url, {\n    ...options,\n    headers\n  });\n\n  // Handle 401 Unauthorized errors\n  if (response.status === 401) {\n    // Try to refresh the token\n    const refreshToken = getRefreshToken();\n    if (refreshToken) {\n      const newAccessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n      if (newAccessToken) {\n        // Retry the request with the new token\n        headers['Authorization'] = `Bearer ${newAccessToken}`;\n        return fetch(url, {\n          ...options,\n          headers\n        });\n      }\n    }\n\n    // If we can't refresh, throw an error\n    throw new Error('Authentication failed');\n  }\n  return response;\n};","map":{"version":3,"names":["getAccessToken","getRefreshToken","isTokenExpired","refreshAccessToken","removeTokens","API_BASE_URL","fetchWithAuth","url","options","accessToken","refreshToken","Error","headers","response","fetch","status","newAccessToken"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/utils/api.js"],"sourcesContent":["import { getAccessToken, getRefreshToken, isTokenExpired, refreshAccessToken, removeTokens } from './auth';\nimport API_BASE_URL from '../config/api';\n\n// Helper function to add JWT authentication to fetch requests\nexport const fetchWithAuth = async (url, options = {}) => {\n  // Get the access token\n  let accessToken = getAccessToken();\n\n  // If token exists but is expired, try to refresh it\n  if (accessToken && isTokenExpired(accessToken)) {\n    const refreshToken = getRefreshToken();\n    if (refreshToken) {\n      accessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n      if (!accessToken) {\n        throw new Error('Failed to refresh access token');\n      }\n    } else {\n      throw new Error('No refresh token available');\n    }\n  }\n\n  // Add authorization header if we have a token\n  const headers = {\n    ...options.headers,\n    'Content-Type': 'application/json',\n  };\n\n  if (accessToken) {\n    headers['Authorization'] = `Bearer ${accessToken}`;\n  }\n\n  // Make the request with the authorization header\n  const response = await fetch(url, {\n    ...options,\n    headers,\n  });\n\n  // Handle 401 Unauthorized errors\n  if (response.status === 401) {\n    // Try to refresh the token\n    const refreshToken = getRefreshToken();\n    if (refreshToken) {\n      const newAccessToken = await refreshAccessToken(refreshToken, API_BASE_URL);\n      if (newAccessToken) {\n        // Retry the request with the new token\n        headers['Authorization'] = `Bearer ${newAccessToken}`;\n        return fetch(url, {\n          ...options,\n          headers,\n        });\n      }\n    }\n\n    // If we can't refresh, throw an error\n    throw new Error('Authentication failed');\n  }\n\n  return response;\n};\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,QAAQ;AAC1G,OAAOC,YAAY,MAAM,eAAe;;AAExC;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACxD;EACA,IAAIC,WAAW,GAAGT,cAAc,CAAC,CAAC;;EAElC;EACA,IAAIS,WAAW,IAAIP,cAAc,CAACO,WAAW,CAAC,EAAE;IAC9C,MAAMC,YAAY,GAAGT,eAAe,CAAC,CAAC;IACtC,IAAIS,YAAY,EAAE;MAChBD,WAAW,GAAG,MAAMN,kBAAkB,CAACO,YAAY,EAAEL,YAAY,CAAC;MAClE,IAAI,CAACI,WAAW,EAAE;QAChB,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;MACnD;IACF,CAAC,MAAM;MACL,MAAM,IAAIA,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF;;EAEA;EACA,MAAMC,OAAO,GAAG;IACd,GAAGJ,OAAO,CAACI,OAAO;IAClB,cAAc,EAAE;EAClB,CAAC;EAED,IAAIH,WAAW,EAAE;IACfG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,WAAW,EAAE;EACpD;;EAEA;EACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAG,EAAE;IAChC,GAAGC,OAAO;IACVI;EACF,CAAC,CAAC;;EAEF;EACA,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IAC3B;IACA,MAAML,YAAY,GAAGT,eAAe,CAAC,CAAC;IACtC,IAAIS,YAAY,EAAE;MAChB,MAAMM,cAAc,GAAG,MAAMb,kBAAkB,CAACO,YAAY,EAAEL,YAAY,CAAC;MAC3E,IAAIW,cAAc,EAAE;QAClB;QACAJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUI,cAAc,EAAE;QACrD,OAAOF,KAAK,CAACP,GAAG,EAAE;UAChB,GAAGC,OAAO;UACVI;QACF,CAAC,CAAC;MACJ;IACF;;IAEA;IACA,MAAM,IAAID,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,OAAOE,QAAQ;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}