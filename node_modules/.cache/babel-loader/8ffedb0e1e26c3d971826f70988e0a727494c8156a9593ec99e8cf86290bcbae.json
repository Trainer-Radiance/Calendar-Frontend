{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Radiance_Tech\\\\Desktop\\\\calendar-app\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { AUTH_ENDPOINTS } from '../config/api';\nimport { storeTokens, getAccessToken, getRefreshToken, removeTokens, parseJwt, isTokenExpired, refreshAccessToken } from '../utils/auth';\nimport API_BASE_URL from '../config/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        console.log('Checking authentication...');\n\n        // Check for tokens in URL (after OAuth redirect)\n        const urlParams = new URLSearchParams(window.location.search);\n        const accessToken = urlParams.get('accessToken');\n        const refreshToken = urlParams.get('refreshToken');\n\n        // If tokens are in URL, store them and clean up URL\n        if (accessToken && refreshToken) {\n          storeTokens(accessToken, refreshToken);\n          // Remove tokens from URL to prevent bookmarking with tokens\n          window.history.replaceState({}, document.title, window.location.pathname);\n        }\n\n        // Get stored tokens\n        const storedAccessToken = getAccessToken();\n        const storedRefreshToken = getRefreshToken();\n\n        // If we have tokens, use them\n        if (storedAccessToken) {\n          // Check if token is expired\n          if (isTokenExpired(storedAccessToken) && storedRefreshToken) {\n            // Try to refresh the token\n            const newAccessToken = await refreshAccessToken(storedRefreshToken, API_BASE_URL);\n            if (!newAccessToken) {\n              // If refresh failed, clear tokens and user\n              removeTokens();\n              setUser(null);\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Use JWT token to get user info\n          const res = await fetch(AUTH_ENDPOINTS.GET_ME, {\n            headers: {\n              'Authorization': `Bearer ${getAccessToken()}`,\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n          if (res.ok) {\n            const data = await res.json();\n            console.log('Auth data from JWT:', data);\n            setUser(data.user);\n          } else {\n            // If JWT auth fails, try session-based auth as fallback\n            console.log('JWT auth failed, trying session auth...');\n            const sessionRes = await fetch(AUTH_ENDPOINTS.GET_ME_SESSION, {\n              credentials: 'include',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            });\n            if (sessionRes.ok) {\n              const sessionData = await sessionRes.json();\n              console.log('Auth data from session:', sessionData);\n              setUser(sessionData.user);\n            } else {\n              setUser(null);\n            }\n          }\n        } else {\n          // No tokens, try session-based auth as fallback\n          console.log('No JWT tokens, trying session auth...');\n          const sessionRes = await fetch(AUTH_ENDPOINTS.GET_ME_SESSION, {\n            credentials: 'include',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n          if (sessionRes.ok) {\n            const sessionData = await sessionRes.json();\n            console.log('Auth data from session:', sessionData);\n            setUser(sessionData.user);\n          } else {\n            setUser(null);\n          }\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const logout = async () => {\n    try {\n      // JWT logout - client side\n      if (getAccessToken()) {\n        await fetch(AUTH_ENDPOINTS.JWT_LOGOUT, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${getAccessToken()}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        // Remove tokens from localStorage\n        removeTokens();\n      }\n\n      // Also try session logout for backward compatibility\n      await fetch(AUTH_ENDPOINTS.LOGOUT, {\n        method: 'POST',\n        credentials: 'include'\n      });\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n      // Still remove tokens and user state even if API call fails\n      removeTokens();\n      setUser(null);\n    }\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      logout,\n      timezone,\n      setTimezone,\n      timezoneAbbr: getTimezoneAbbr()\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"lBhsem/apQYczxmyIEtgmDU78Oo=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","AUTH_ENDPOINTS","storeTokens","getAccessToken","getRefreshToken","removeTokens","parseJwt","isTokenExpired","refreshAccessToken","API_BASE_URL","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","timezone","setTimezone","userTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","startsWith","error","loading","setLoading","checkAuth","console","log","urlParams","URLSearchParams","window","location","search","accessToken","get","refreshToken","history","replaceState","document","title","pathname","storedAccessToken","storedRefreshToken","newAccessToken","res","fetch","GET_ME","headers","ok","data","json","sessionRes","GET_ME_SESSION","credentials","sessionData","logout","JWT_LOGOUT","method","LOGOUT","getTimezoneAbbr","date","Date","toLocaleTimeString","timeZoneName","split","Provider","value","timezoneAbbr","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport { AUTH_ENDPOINTS } from '../config/api';\nimport {\n  storeTokens,\n  getAccessToken,\n  getRefreshToken,\n  removeTokens,\n  parseJwt,\n  isTokenExpired,\n  refreshAccessToken\n} from '../utils/auth';\nimport API_BASE_URL from '../config/api';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        console.log('Checking authentication...');\n\n        // Check for tokens in URL (after OAuth redirect)\n        const urlParams = new URLSearchParams(window.location.search);\n        const accessToken = urlParams.get('accessToken');\n        const refreshToken = urlParams.get('refreshToken');\n\n        // If tokens are in URL, store them and clean up URL\n        if (accessToken && refreshToken) {\n          storeTokens(accessToken, refreshToken);\n          // Remove tokens from URL to prevent bookmarking with tokens\n          window.history.replaceState({}, document.title, window.location.pathname);\n        }\n\n        // Get stored tokens\n        const storedAccessToken = getAccessToken();\n        const storedRefreshToken = getRefreshToken();\n\n        // If we have tokens, use them\n        if (storedAccessToken) {\n          // Check if token is expired\n          if (isTokenExpired(storedAccessToken) && storedRefreshToken) {\n            // Try to refresh the token\n            const newAccessToken = await refreshAccessToken(storedRefreshToken, API_BASE_URL);\n            if (!newAccessToken) {\n              // If refresh failed, clear tokens and user\n              removeTokens();\n              setUser(null);\n              setLoading(false);\n              return;\n            }\n          }\n\n          // Use JWT token to get user info\n          const res = await fetch(AUTH_ENDPOINTS.GET_ME, {\n            headers: {\n              'Authorization': `Bearer ${getAccessToken()}`,\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (res.ok) {\n            const data = await res.json();\n            console.log('Auth data from JWT:', data);\n            setUser(data.user);\n          } else {\n            // If JWT auth fails, try session-based auth as fallback\n            console.log('JWT auth failed, trying session auth...');\n            const sessionRes = await fetch(AUTH_ENDPOINTS.GET_ME_SESSION, {\n              credentials: 'include',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            });\n\n            if (sessionRes.ok) {\n              const sessionData = await sessionRes.json();\n              console.log('Auth data from session:', sessionData);\n              setUser(sessionData.user);\n            } else {\n              setUser(null);\n            }\n          }\n        } else {\n          // No tokens, try session-based auth as fallback\n          console.log('No JWT tokens, trying session auth...');\n          const sessionRes = await fetch(AUTH_ENDPOINTS.GET_ME_SESSION, {\n            credentials: 'include',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          });\n\n          if (sessionRes.ok) {\n            const sessionData = await sessionRes.json();\n            console.log('Auth data from session:', sessionData);\n            setUser(sessionData.user);\n          } else {\n            setUser(null);\n          }\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const logout = async () => {\n    try {\n      // JWT logout - client side\n      if (getAccessToken()) {\n        await fetch(AUTH_ENDPOINTS.JWT_LOGOUT, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${getAccessToken()}`,\n            'Content-Type': 'application/json'\n          }\n        });\n        // Remove tokens from localStorage\n        removeTokens();\n      }\n\n      // Also try session logout for backward compatibility\n      await fetch(AUTH_ENDPOINTS.LOGOUT, {\n        method: 'POST',\n        credentials: 'include'\n      });\n\n      setUser(null);\n    } catch (error) {\n      console.error('Logout failed:', error);\n      // Still remove tokens and user state even if API call fails\n      removeTokens();\n      setUser(null);\n    }\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        logout,\n        timezone,\n        setTimezone,\n        timezoneAbbr: getTimezoneAbbr()\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}