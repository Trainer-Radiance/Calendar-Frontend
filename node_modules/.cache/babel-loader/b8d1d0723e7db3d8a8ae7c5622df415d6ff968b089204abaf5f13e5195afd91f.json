{"ast":null,"code":"import{createContext,useContext,useState,useEffect}from'react';import{AUTH_ENDPOINTS}from'../config/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export function AuthProvider(_ref){let{children}=_ref;const[user,setUser]=useState(null);const[timezone,setTimezone]=useState(()=>{// Try to get the user's timezone automatically\ntry{const userTimeZone=Intl.DateTimeFormat().resolvedOptions().timeZone;// If it's a US timezone, return it, otherwise default to America/New_York\nreturn userTimeZone.startsWith('America/')?userTimeZone:'America/New_York';}catch(error){return'America/New_York';// Default to EST/EDT\n}});const[loading,setLoading]=useState(true);useEffect(()=>{const checkAuth=async()=>{try{const res=await fetch(AUTH_ENDPOINTS.GET_ME,{credentials:'include'});const data=await res.json();setUser(data.user);}catch(error){console.error('Auth check failed:',error);}finally{setLoading(false);}};checkAuth();},[]);const logout=async()=>{await fetch(AUTH_ENDPOINTS.LOGOUT,{method:'POST',credentials:'include'});setUser(null);};// Get the current timezone abbreviation (e.g., EST or EDT)\nconst getTimezoneAbbr=()=>{const date=new Date();return date.toLocaleTimeString('en-US',{timeZone:timezone,timeZoneName:'short'}).split(' ')[2];};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,logout,timezone,setTimezone,timezoneAbbr:getTimezoneAbbr()},children:children});}export function useAuth(){const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;}","map":{"version":3,"names":["createContext","useContext","useState","useEffect","AUTH_ENDPOINTS","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","timezone","setTimezone","userTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","startsWith","error","loading","setLoading","checkAuth","res","fetch","GET_ME","credentials","data","json","console","logout","LOGOUT","method","getTimezoneAbbr","date","Date","toLocaleTimeString","timeZoneName","split","Provider","value","timezoneAbbr","useAuth","context","Error"],"sources":["c:/Users/Radiance_Tech/Desktop/calendar-app/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport { AUTH_ENDPOINTS } from '../config/api';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [timezone, setTimezone] = useState(() => {\n    // Try to get the user's timezone automatically\n    try {\n      const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n      // If it's a US timezone, return it, otherwise default to America/New_York\n      return userTimeZone.startsWith('America/') ? userTimeZone : 'America/New_York';\n    } catch (error) {\n      return 'America/New_York'; // Default to EST/EDT\n    }\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const res = await fetch(AUTH_ENDPOINTS.GET_ME, {\n          credentials: 'include'\n        });\n        const data = await res.json();\n        setUser(data.user);\n      } catch (error) {\n        console.error('Auth check failed:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  const logout = async () => {\n    await fetch(AUTH_ENDPOINTS.LOGOUT, {\n      method: 'POST',\n      credentials: 'include'\n    });\n    setUser(null);\n  };\n\n  // Get the current timezone abbreviation (e.g., EST or EDT)\n  const getTimezoneAbbr = () => {\n    const date = new Date();\n    return date.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      timeZoneName: 'short'\n    }).split(' ')[2];\n  };\n\n  return (\n    <AuthContext.Provider \n      value={{ \n        user, \n        loading, \n        logout, \n        timezone, \n        setTimezone,\n        timezoneAbbr: getTimezoneAbbr()\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CACtE,OAASC,cAAc,KAAQ,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE/C,KAAM,CAAAC,WAAW,cAAGP,aAAa,CAAC,CAAC,CAEnC,MAAO,SAAS,CAAAQ,YAAYA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACW,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAAC,IAAM,CAC7C;AACA,GAAI,CACF,KAAM,CAAAa,YAAY,CAAGC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC,QAAQ,CACrE;AACA,MAAO,CAAAJ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC,CAAGL,YAAY,CAAG,kBAAkB,CAChF,CAAE,MAAOM,KAAK,CAAE,CACd,MAAO,kBAAkB,CAAE;AAC7B,CACF,CAAC,CAAC,CACF,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGrB,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,CAACtB,cAAc,CAACuB,MAAM,CAAE,CAC7CC,WAAW,CAAE,SACf,CAAC,CAAC,CACF,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,CAAC,CAC7BlB,OAAO,CAACiB,IAAI,CAAClB,IAAI,CAAC,CACpB,CAAE,MAAOU,KAAK,CAAE,CACdU,OAAO,CAACV,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC5C,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CACDC,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAQ,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,KAAM,CAAAN,KAAK,CAACtB,cAAc,CAAC6B,MAAM,CAAE,CACjCC,MAAM,CAAE,MAAM,CACdN,WAAW,CAAE,SACf,CAAC,CAAC,CACFhB,OAAO,CAAC,IAAI,CAAC,CACf,CAAC,CAED;AACA,KAAM,CAAAuB,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACvB,MAAO,CAAAD,IAAI,CAACE,kBAAkB,CAAC,OAAO,CAAE,CACtCnB,QAAQ,CAAEN,QAAQ,CAClB0B,YAAY,CAAE,OAChB,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAClB,CAAC,CAED,mBACElC,IAAA,CAACC,WAAW,CAACkC,QAAQ,EACnBC,KAAK,CAAE,CACL/B,IAAI,CACJW,OAAO,CACPU,MAAM,CACNnB,QAAQ,CACRC,WAAW,CACX6B,YAAY,CAAER,eAAe,CAAC,CAChC,CAAE,CAAAzB,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAEA,MAAO,SAAS,CAAAkC,OAAOA,CAAA,CAAG,CACxB,KAAM,CAAAC,OAAO,CAAG5C,UAAU,CAACM,WAAW,CAAC,CACvC,GAAI,CAACsC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}