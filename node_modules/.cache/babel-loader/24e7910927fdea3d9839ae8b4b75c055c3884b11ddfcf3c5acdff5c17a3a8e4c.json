{"ast":null,"code":"// JWT token storage and retrieval functions\n\n// Store tokens in localStorage\nexport const storeTokens = (accessToken, refreshToken) => {\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\n// Get access token from localStorage\nexport const getAccessToken = () => {\n  return localStorage.getItem('accessToken');\n};\n\n// Get refresh token from localStorage\nexport const getRefreshToken = () => {\n  return localStorage.getItem('refreshToken');\n};\n\n// Remove tokens from localStorage\nexport const removeTokens = () => {\n  localStorage.removeItem('accessToken');\n  localStorage.removeItem('refreshToken');\n};\n\n// Parse JWT token to get user info\nexport const parseJwt = token => {\n  try {\n    return JSON.parse(atob(token.split('.')[1]));\n  } catch (e) {\n    return null;\n  }\n};\n\n// Check if token is expired\nexport const isTokenExpired = token => {\n  if (!token) return true;\n  const decoded = parseJwt(token);\n  if (!decoded) return true;\n\n  // Check if expiration time is past current time\n  // exp is in seconds, Date.now() is in milliseconds\n  return decoded.exp * 1000 < Date.now();\n};\n\n// Refresh the access token using the refresh token\nexport const refreshAccessToken = async (refreshToken, apiBaseUrl) => {\n  try {\n    const response = await fetch(`${apiBaseUrl}/api/refresh-token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refreshToken\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to refresh token');\n    }\n    const data = await response.json();\n    localStorage.setItem('accessToken', data.accessToken);\n    return data.accessToken;\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["storeTokens","accessToken","refreshToken","localStorage","setItem","getAccessToken","getItem","getRefreshToken","removeTokens","removeItem","parseJwt","token","JSON","parse","atob","split","e","isTokenExpired","decoded","exp","Date","now","refreshAccessToken","apiBaseUrl","response","fetch","method","headers","body","stringify","ok","Error","data","json","error","console"],"sources":["C:/Users/Radiance_Tech/Desktop/calendar-app/client/src/utils/auth.js"],"sourcesContent":["// JWT token storage and retrieval functions\n\n// Store tokens in localStorage\nexport const storeTokens = (accessToken, refreshToken) => {\n  localStorage.setItem('accessToken', accessToken);\n  localStorage.setItem('refreshToken', refreshToken);\n};\n\n// Get access token from localStorage\nexport const getAccessToken = () => {\n  return localStorage.getItem('accessToken');\n};\n\n// Get refresh token from localStorage\nexport const getRefreshToken = () => {\n  return localStorage.getItem('refreshToken');\n};\n\n// Remove tokens from localStorage\nexport const removeTokens = () => {\n  localStorage.removeItem('accessToken');\n  localStorage.removeItem('refreshToken');\n};\n\n// Parse JWT token to get user info\nexport const parseJwt = (token) => {\n  try {\n    return JSON.parse(atob(token.split('.')[1]));\n  } catch (e) {\n    return null;\n  }\n};\n\n// Check if token is expired\nexport const isTokenExpired = (token) => {\n  if (!token) return true;\n  \n  const decoded = parseJwt(token);\n  if (!decoded) return true;\n  \n  // Check if expiration time is past current time\n  // exp is in seconds, Date.now() is in milliseconds\n  return decoded.exp * 1000 < Date.now();\n};\n\n// Refresh the access token using the refresh token\nexport const refreshAccessToken = async (refreshToken, apiBaseUrl) => {\n  try {\n    const response = await fetch(`${apiBaseUrl}/api/refresh-token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ refreshToken }),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to refresh token');\n    }\n    \n    const data = await response.json();\n    localStorage.setItem('accessToken', data.accessToken);\n    return data.accessToken;\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    return null;\n  }\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,WAAW,GAAGA,CAACC,WAAW,EAAEC,YAAY,KAAK;EACxDC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,WAAW,CAAC;EAChDE,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;AACpD,CAAC;;AAED;AACA,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAOF,YAAY,CAACG,OAAO,CAAC,aAAa,CAAC;AAC5C,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOJ,YAAY,CAACG,OAAO,CAAC,cAAc,CAAC;AAC7C,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAM;EAChCL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;EACtCN,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;AACzC,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EACjC,IAAI;IACF,OAAOC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9C,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIN,KAAK,IAAK;EACvC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAMO,OAAO,GAAGR,QAAQ,CAACC,KAAK,CAAC;EAC/B,IAAI,CAACO,OAAO,EAAE,OAAO,IAAI;;EAEzB;EACA;EACA,OAAOA,OAAO,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOpB,YAAY,EAAEqB,UAAU,KAAK;EACpE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGF,UAAU,oBAAoB,EAAE;MAC9DG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEhB,IAAI,CAACiB,SAAS,CAAC;QAAE3B;MAAa,CAAC;IACvC,CAAC,CAAC;IAEF,IAAI,CAACsB,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC9B,YAAY,CAACC,OAAO,CAAC,aAAa,EAAE4B,IAAI,CAAC/B,WAAW,CAAC;IACrD,OAAO+B,IAAI,CAAC/B,WAAW;EACzB,CAAC,CAAC,OAAOiC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}